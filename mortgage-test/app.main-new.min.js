var pCabinet = {};
var phoneCountryList = [];

var Polis812_PR = {
    _hitParamName: 'partnerId',
    _allowParams:
        [
            {
                name: 'partnerId',
                alias: ['partnerId', 'partner_id', 'partner'],
            },
            {
                name: 'smartleads_src',
                additional: ['smartleads_sid', 'smartleads_pid']
            },
            {
                name: 'actionpay'
            },
            {
                name: 'click_id'
            },
            {
                name: '7offers'
            },
            {
                name: 'admitad_uid'
            }
        ],
    _cookieParam: {
        secure: true,
        expires: 30,
        path: '/',
        domain: '.polis812.ru'
    },
    _parseParamFromUrl: function (name, url) {
        if (!url) url = this._url;
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex   = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    },
    _url: null,
    _findFillField: function () {
        var object = [],
            parent = this;

        parent._allowParams.some(function (item) {
            if (parent._parseParamFromUrl(item.name)) {
                object = [{name: item.name, value: parent._parseParamFromUrl(item.name)}];

                if (typeof item.additional !== 'undefined' && Array.isArray(item.additional)) {
                    item.additional.some(function (addItem) {
                        parent._parseParamFromUrl(addItem) && object.push({
                            name: addItem,
                            value: parent._parseParamFromUrl(addItem)
                        });
                    });
                }
                return true;
            }
            if (typeof item.alias !== 'undefined' && Array.isArray(item.alias)) {
                return item.alias.some(function (aliasItem) {
                    if (parent._parseParamFromUrl(aliasItem)) {
                        object = [{name: item.name, value: parent._parseParamFromUrl(aliasItem)}];
                        return true;
                    }
                });
            }
        });

        return object;
    },
    _clearCookies: function () {
        var parent = this;
        parent._allowParams.some(function (item) {
            parent._removeParam(item.name);
            if (typeof item.alias !== 'undefined' && Array.isArray(item.alias)) {
                item.alias.some(function (aliasItem) {
                    parent._removeParam(aliasItem);
                });
            }
        });
    },
    _removeParam: function (key) {
        $.removeCookie(key, {path: '/', domain: '.polis812.ru'});
    },
    _saveParam: function (key, value) {
        $.cookie(key, value, this._cookieParam);
    },
    _sendHit: function (id) {
        $.get('/api/log/pr/' + id, {
            r: typeof document !== "undefined" && typeof document.referrer !== "undefined" ? document.referrer : ''
        });
    },
    _saveHistory: function (key, value) {
        var hh = $.cookie('hh') ? JSON.parse($.cookie('hh')) : [];
        var data = {};

        if (this._parseParamFromUrl('utm_source')) {
            data = {
                utm_source: this._parseParamFromUrl('utm_source'),
                utm_medium: this._parseParamFromUrl('utm_medium'),
                utm_campaign: this._parseParamFromUrl('utm_campaign'),
                utm_content: this._parseParamFromUrl('utm_content'),
                utm_term: this._parseParamFromUrl('utm_term'),
            };
        }

        var newData = {
            key: key,
            value: value,
            data: data,
            timestamp: null
        };

        var copyArray   = hh.slice(),
            lastElement = copyArray.pop();

        if (lastElement) {
            lastElement.timestamp = null;
        }


        if (!lastElement || !_.isEqual(lastElement, newData)) {
            newData.timestamp = parseInt(Date.now() / 1000);
            hh.push(newData);
            $.cookie('hh', JSON.stringify(hh), this._cookieParam);
        }
    },
    init:
        function (url) {
            this._url = url;
        },
    parse: function () {
        var findObject = this._findFillField(),
            parent     = this;

        if (findObject && findObject.length) {
            this._clearCookies();

            findObject.some(function (item) {
                parent._saveParam(item.name, item.value);
                parent._saveHistory(item.name, item.value);

                if (item.name === Polis812_PR._hitParamName) {
                    parent._sendHit(item.value);
                }
            });

        }
    },
};
;

try {
    Polis812_PR.init(window.location.href);
    Polis812_PR.parse();
} catch (e) {

}

$(document).ready(function () {
    $('.lk-auth').hide();
    $('.lk-no-auth').hide();
    
    $(document).on('submit', '.subform', function (e) {
        e.preventDefault();
        if ($(this).hasClass('subform--new')) {
            var isAcceptRules = $(this).find('input[name="isAcceptRules"]:checked').length;
            if (!isAcceptRules) {
                showErrorModal({
                    title: 'Ошибка',
                    text: 'Вы не согласились с условиями обработки персональных данных',
                    button: 'Вернуться к оформлению',
                });
                return;
            }
        }

        if ($(this).data('ajax_running') != 1) {
            var form = $(this);
            var viza = $(this).find('input[name="viza"]:checked').length;
            var vzr = $(this).find('input[name="vzr"]:checked').length;
            var green = $(this).find('input[name="green"]:checked').length;
            var osago = $(this).find('input[name="osago"]:checked').length;
            var tour = $(this).find('input[name="tour"]:checked').length;
            var types = viza + ',' + vzr + ',' + green + ',' + osago + ',' + tour;
            var email = $(this).find('input[name="sub_email"]').val();
            if (_validateElement($(this).find('input[name="sub_email"]'))) {
                $(this).data('ajax_running', 1);
                $.ajax({
                    url: '/backend/ajax/save_lead.php',
                    data: {
                        email: email,
                        type: types
                    },
                    type: 'POST',
                    dataType: 'json',
                    success: function (result) {
                        if (result.callback) {
                            eval(result.callback);
                        }
                        form.hide();
                        form.after('Спасибо за подписку!');

                        if (form.hasClass('subform--new')) {
                            $('.subscribe-new').addClass('success');
                        }
                    },
                    complete: function (data) {
                        form.data('ajax_running', 0);
                    }
                });
            }
        }
    });

    // меню гамбургер
    $("#show-me-menu").on("click", clickHamb);

    function clickHamb () {
        if (!$(this).is('.is-active')) {
            $(this).addClass('is-active');
            $('.mobile-nav').slideToggle(300);
            $('body').addClass('menuOpen');
        } else {
            $(this).removeClass('is-active');
            $('.mobile-nav').slideToggle(300);
            $('body').removeClass('menuOpen');
        }
    }

    $('.menu-toggle').on('click', function () {
        if (!$(this).hasClass('active')) {
            $('.menu-toggle').removeClass('active');
            $(this).addClass('active');

            if (window.matchMedia('(min-width: 768px)').matches) {
                $('.header-new__menu-desc').slideUp();
                $(this).siblings('.header-new__menu-desc').slideDown();
                $('.header-new__content-item-wrapper').slideUp();
                $('#' + $(this).data('collapse')).slideDown();
            } else {
                $('.header-new__content-item-wrapper').animate({'left': '100%'});
                $('#' + $(this).data('collapse')).animate({'left': '0'});
            }
        }
    });

    $('.header-new__content-back-btn').on('click', function () {
        $('.menu-toggle').removeClass('active');
        $('.header-new__content-item-wrapper').animate({'left': '100%'});
    });

    // Меню авторизованного пользователя
    $('.header-new__profile-show-link').click(function (evt) {
        evt.preventDefault();
        $(this).toggleClass('active');
        $('.header-new__lk-dropdown').slideToggle();
    });

    // Карусель insurance-payments
    function initInsurancePaymentsSlider () {
        $('.insurance-payments-slider').addClass('owl-carousel').owlCarousel({
            loop: true,
            nav: false,
            dots: true,
            items: 1,
            autoplay: true,
            autoplayTimeout: 7000,
            autoplayHoverPause: true,
            responsive: {
                0: {
                    items: 1
                },
                550: {
                    items: 2
                },
                768: {
                    items: 3
                },
                1024: {
                    items: 4
                },
            }
        });
    }

    if (window.innerWidth < 1201) {
        initInsurancePaymentsSlider();
    }

    $(window).resize(function () {
        if (window.innerWidth < 1201) {
            initInsurancePaymentsSlider();
        } else {
            $('.insurance-payments-slider').trigger('destroy.owl.carousel').removeClass('owl-carousel owl-loaded');
            $('.insurance-payments-slider').find('.owl-stage-outer').children().unwrap();
        }
    });

    const $imageCard = $('.image-card');

    const handleMouseEnter = function () {
        $('.image-card__info', $(this)).fadeIn();
    };
    const handleMouseLeave = function () {
        $('.image-card__info', $(this)).fadeOut();
    };

    if (window.matchMedia('(min-width: 1201px)').matches) {
        $imageCard.on('mouseenter', handleMouseEnter);
        $imageCard.on('mouseleave', handleMouseLeave);
        $('.image-card__info', $imageCard).fadeOut();
    }

    $(window).resize(function () {
        if (window.matchMedia('(min-width: 1201px)').matches) {
            $imageCard.on('mouseenter', handleMouseEnter);
            $imageCard.on('mouseleave', handleMouseLeave);
            $('.image-card__info', $imageCard).fadeOut();
        } else {
            $imageCard.off('mouseenter', handleMouseEnter);
            $imageCard.off('mouseleave', handleMouseLeave);
            $('.image-card__info', $imageCard).fadeIn();
        }
    });

    // Prevent # errors
    $('[href="#"]').click(function (e) {
        e.preventDefault();
    });

    $('.to-up-arrow').click(function () {
        scrollToEl('head');
    });

    $(document).scroll(function () {
        $el = $('.to-up-arrow');
        if (window.screen.height < window.scrollY) {
            if (!$el.hasClass('active')) {
                $el.addClass('active');
            }
        } else {
            if ($el.hasClass('active')) {
                $el.removeClass('active');
            }
        }
    });

    $('.consultant-button').click(function () {
        if (typeof jivo_api !== 'undefined') {
            jivo_api.open();
        }
    });
});

function loadCountries () {
    if (!phoneCountryList.length) {
        $.getJSON("img/flags/countries.json", function (data) {
            $.each(data, function (key, val) {
                phoneCountryList.push(val);
            });

            var $optionsList = $('.country-phone-option-list');
            var addData = getCountries('');
            $optionsList.append(addData);
        });
        return true;
    }
}

function setCountriesList ($optionList, value) {
    $optionList.find('.country-phone-option').remove();
    var data = getCountries(value);
    $optionList.append(data);
}

function updateValue () {
    var value = $(this).val().replace(/\D+/g, "");

    if (value.substring(0, 2) === '89') {
        value = '79' + value.substring(2)
    }

    var isChange = Math.abs(($(this).attr('last-phone') || '').length - value.length) > 2;
    $(this).attr('last-phone', value);

    if (!isChange) {
        return;
    }

    if (value.length < 11)
        return;

    for (var i = 0; i < value.length; i++) {
        var code,
            val = value.substring(0, i + 1);
        var isFound = !phoneCountryList.every(function (country) {
            if (country.ph === val) {
                code = country.ph;
                return false;
            }
            return true;
        });

        if (isFound) {
            $(this).val(value.substring(code.length));
            $(this).closest('.phone-container').siblings('.country-phone-option-list').find('div[data-phone="' + code + '"]:first').click();
            $(this).trigger('input');
            break;
        }
    }
}

function triggerJsInputPhone () {
    var input = document.querySelectorAll('.input-phone');
    for (var i = 0; i < input.length; i++) {
        input[i].dispatchEvent(new CustomEvent("input"));
    }
}

function addListener () {
    // Js, чтобы обработать autocomplete перед библиотекой cleave
    var input = document.querySelectorAll('.input-phone');
    for (var i = 0; i < input.length; i++) {
        input[i].addEventListener('input', updateValue);
    }
}

function initPhoneCountries () {
    addListener();
    loadCountries();

    var $phoneCode = $('.phone-code');
    var $inputPhone = $('.input-phone');

    $inputPhone.ready(function () {
        $inputPhone.each(function () {
            var code = $(this).siblings('.phone-code').find('.country-code').html().replace(/[^0-9]/g, '');
            var phoneMask = [0, 3, 0, 3, 2, 2];

            if (code != 7) {
                phoneMask = [0, 3, 0, 3, 3, 3];
            }

            new Cleave($(this), {
                numericOnly: true,
                blocks: phoneMask,
                delimiters: ["(", ")", " ", "-", "-"]
            });
        })
    });

    $phoneCode.off('click');
    $phoneCode.on('click', function () {
        const $optionsList = $(this).closest('.phone-container').siblings('.country-phone-option-list');
        const $search = $optionsList.find('.country-phone-search');

        $optionsList.find('.country-phone-search').on('input', function (e) {
            const $optionsList = $(this).closest('.country-phone-option-list');

            setCountriesList($optionsList, $(this).val())
        });

        $optionsList.show();
        $search.val('').focus().trigger('input');

        const outsideClickListener = (event) => {
            const $target = $(event.target);

            if (!$target.closest($optionsList).length) {
                $optionsList.hide();
                removeClickListener();
            }
        }

        const removeClickListener = () => {
            document.removeEventListener('click', outsideClickListener);
        }

        setTimeout(() => document.addEventListener('click', outsideClickListener), 1000)
    });

    // change для перехвата изменения поля Cleave'ом на телефонах
    $(document).off('input change', '.input-phone');
    $(document).on('input change', '.input-phone', function (e) {
        var code = $(this).siblings('.phone-code').find('.country-code').html().replace(/[^0-9]/g, '');
        var number = $(this).val().replace(/[^0-9]/g, '');

        $(this).siblings('[type="hidden"]').val(code + number);
    });

    $(document).off('change', '.input-phone');
    $(document).on('change', '.input-phone', function (e) {
        if ($(this).hasClass('input-phone--updated')) {
            const $phoneContainer = $(this).closest('.phone-container');
            const code = $(this).siblings('.phone-code').find('.country-code').text();
            const number = $(this).val();
            const minLength = code === '+7' ? 15 : 9;

            if (number.length < minLength) {
                $phoneContainer.addClass('error');
                $phoneContainer.siblings('label.error').show();
            } else {
                $phoneContainer.removeClass('error');
                $phoneContainer.siblings('label.error').hide();
            }
        }
    });

    $(document).off('click', '.country-phone-option');
    $(document).on('click', '.country-phone-option', function (e) {
        var $optionsList = $(this).closest('.country-phone-option-list');

        var $phoneContainer = $optionsList.siblings('.phone-container');
        var $inputPhone = $phoneContainer.find('.input-phone');

        var phone = $(this).data('phone');
        var phoneMask = [0, 3, 0, 3, 2, 2];
        var placeholder = '(916) ___ - __ - __';

        if (phone != 7) {
            phoneMask = [0, 3, 0, 3, 3, 3];
            placeholder = '(___) ___ - ___ - ___';
        }

        $phoneContainer.find('input[name="phone_number"]').attr('placeholder', placeholder);
        $phoneContainer.find('.phone-code img').attr('class', 'country-flag flag flag-' + $(this).data('co'));
        $phoneContainer.find('.country-code').text('+' + phone);

        $optionsList.hide();

        setCountriesList($optionsList, '');
        // Иначе JQuery не успевает снять input event с удаленного элемента ?
        setTimeout(function () {
            // Нормально снять cleave
            var $newInputPhone = $inputPhone.clone();
            $inputPhone.remove();
            $phoneContainer.append($newInputPhone);

            addListener();
            new Cleave($phoneContainer.find('.input-phone'), {
                numericOnly: true,
                blocks: phoneMask,
                delimiters: ["(", ")", " ", "-", "-"]
            });

            $newInputPhone.trigger('input').change();
            triggerJsInputPhone();
        }, 100);

    });
}

function getCountries (searchString) {
    var data = '';
    phoneCountryList.forEach(function (country) {
        if (country.na.match(RegExp(searchString, "i"))) {
            data += $('.template-country-phone').tmpl(country)[0].outerHTML;
        }
    });

    return data;
}

function encodeHTML (s) {
    return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
}

function _validateElement (el, force_invalid_status) {
    var validated = true;
    if (force_invalid_status === undefined) force_invalid_status = false;

    if ($(el).closest('jdiv').is('jdiv')) {
        return true;
    }

    // Если элемент сам имеет title - используем его для вывода ошибки
    if (el.prop('title')) {
        var ele = $(el);
        var parel = el.parents('.calculator__form__input,.calculator__form__filter__checkbox');
    } else {
        var ele = el.parents('.calculator__form__input,.calculator__form__filter__checkbox');
        var parel = ele;
    }

    var origtitle = ele.prop('title');
    el.val(encodeHTML(el.val()));

    var email_pattern = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

    if (el.attr('minlength') && el.val().length < el.attr('minlength')) {
        force_invalid_status = true;
    } else if (el.attr('maxlength') && el.val().length > el.attr('maxlength')) {
        force_invalid_status = true;
    }

    if (
        !el.val().trim() ||
        force_invalid_status ||
        (el.val().indexOf("_") !== -1 && el.prop('name').indexOf('email') == -1) ||
        (el.is('[name]') && el.attr('name').indexOf('email') !== -1 && !email_pattern.test(el.val()))
    ) {
        showErrorValidation(ele, origtitle);
        validated = false;
        parel.addClass('not-valid');
    } else if (!isErrorValidationExternal(ele)) {
        hideErrorValidation(ele);
        parel.removeClass('not-valid');
    }

    if (!validated && origtitle) console.log(origtitle + ': ' + el.prop('name'));
    return validated;
}

function declOfNum (number, titles) {
    cases = [2, 0, 1, 1, 1, 2];
    return titles[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]];
}

function scrollToEl (element) {
    $('html,body').stop().animate({scrollTop: $(element).offset().top}, 800);
}

function showErrorValidation (el, text, external) {

    var external = external === undefined ? false : Boolean(external);

    $(el)
        .addClass('not-valid')

        .data('external-error', external)

        .data('original-template', $(el).data('template'))
        .data('template', '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>')

        .prop('data-original-title', $(el).data('title'))
        // .prop('title', text)

        .tooltip('show')
        .prop('title', text); // MAGIC: Если не устанавливать title - он пропадает после вывода tooltip
}

function isErrorValidationExternal (el) {
    return Boolean($(el).data('external-error'));
}

function hideErrorValidation (el) {
    $(el)
        .removeClass('not-valid')

        .data('title', $(el).data('data-original-title'))
        .data('data-original-title', '')

        .data('template', $(el).data('original-template'))
        .data('original-template', '');

    $(el).tooltip('destroy');
}

function showErrorModal (object) {
    var type    = object.type === undefined ? 'danger' : object.type,
        align   = object.align === undefined ? 'center' : object.align,
        title   = object.title === undefined ? 'Ошибка' : object.title,
        text    = object.text,
        button  = object.button,
        icon    = object.icon,
        z_index = object.z_index,
        onclick = object.onclick || '';

    if (!icon) {
        if (type === 'danger') {
            icon = 'fa-close';
        } else if (type === 'warning') {
            icon = 'fa-exclamation';
        } else if (type === 'success') {
            icon = 'fa-check';
        }
    }

    var parent = $('#errorModal');

    $('.modal-title', parent).html(title);

    $('.icon-box i.fa', parent)
        .removeClass()
        .addClass('fa')
        .addClass(icon);

    $('.modal-confirm', parent).addClass(type);
    $('.modal-body p', parent).addClass(align);
    $('.modal-body p', parent).html(text);

    $('.modal-footer .btn', parent).attr('onclick', onclick);

    if (button) {
        $('.modal-footer .btn', parent).html(button);
    } else {
        $('.modal-footer', parent).hide();
    }

    if (z_index) {
        parent.css('z-index', z_index);
    }

    $('#errorModal').modal();

    $("#errorModal .modal-close-icon").on('click', function () {
        $("#errorModal").modal('hide');
    });
}

$(document).ready(function () {
    $(".question-action, .question-title").click(function (e) {
        e.preventDefault();

        var $parent = $(this).closest(".question-block, .question-block-new");

        if ($parent.length) {
            $(".question-answer", $parent).slideToggle();
            $parent.toggleClass("active");
            $(".question-action i.fa", $parent).toggleClass("fa-plus").toggleClass("fa-minus");
        }
    });

    // Скрываем все вопросы
    $(".question-answer").hide();

    // Открываем первый вопрос
    $(".question-title").first().click();
});
